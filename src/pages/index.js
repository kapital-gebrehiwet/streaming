import { getServerSession } from "next-auth/next";
import { useSession } from "next-auth/react";
import { authOptions } from "./api/auth/[...nextauth]";
import Head from "next/head";
import Login from "@/components/login";
import Hero from "@/components/Hero";
import requests from "@/utils/requests";
import Row from "@/components/Row";
import TVShowsRow from '@/components/TVShowsRow';

export default function Home({ 
  session: serverSession,
  moviePosters,
  trendingMovies,
  topRatedMovies,
  actionMovies,
  comedyMovies,
  horrorMovies,
  romanceMovies,
  documentaries,
  // TV Shows
  trendingTVShows,
  topRatedTVShows,
  popularTVShows,
  actionTVShows,
  comedyTVShows
}) {
  const { data: session } = useSession();
  const userSession = session || serverSession;

  if (!userSession) {
    return (
      <div>
        <Login />
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>cla-streaming</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <main className="relative bg-gradient-to-b from-gray-900/10 to-[#000000]">
        <Hero moviePosters={moviePosters} />
        <section className="container pb-32">
          {/* Movies Section */}
          <h2 className="text-2xl font-bold text-white mb-4">Movies</h2>
          <Row title="Trending Now" movies={trendingMovies} />
          <Row title="Top Rated" movies={topRatedMovies} />
          <Row title="Action Thrillers" movies={actionMovies} />
          <Row title="Comedies" movies={comedyMovies} />
          <Row title="Scary Movies" movies={horrorMovies} />
          <Row title="Romance Movies" movies={romanceMovies} />
          <Row title="Documentaries" movies={documentaries} />

          {/* TV Shows Section */}
          <h2 className="text-2xl font-bold text-white mb-4 mt-8">TV Shows</h2>
          <TVShowsRow title="Trending TV Shows" shows={trendingTVShows} />
          <TVShowsRow title="Top Rated TV Shows" shows={topRatedTVShows} />
          <TVShowsRow title="Popular TV Shows" shows={popularTVShows} />
          <TVShowsRow title="Action & Adventure" shows={actionTVShows} />
          <TVShowsRow title="Comedy Shows" shows={comedyTVShows} />
        </section>
      </main>
    </>
  );
}

export async function getServerSideProps(context) {
  const session = await getServerSession(context.req, context.res, authOptions);
  
  try {
    const [
      moviePosters,
      trendingMovies,
      topRatedMovies,
      actionMovies,
      comedyMovies,
      horrorMovies,
      romanceMovies,
      documentaries,
      // TV Shows fetching
      trendingTVShows,
      topRatedTVShows,
      popularTVShows,
      actionTVShows,
      comedyTVShows,
    ] = await Promise.all([
      // Movies
      fetch(requests.fetchMoviePosters).then((res) => res.json()),
      fetch(requests.fetchTrendingMovies).then((res) => res.json()),
      fetch(requests.fetchTopRatedMovies).then((res) => res.json()),
      fetch(requests.fetchActionMovies).then((res) => res.json()),
      fetch(requests.fetchComedyMovies).then((res) => res.json()),
      fetch(requests.fetchHorrorMovies).then((res) => res.json()),
      fetch(requests.fetchRomanceMovies).then((res) => res.json()),
      fetch(requests.fetchDocumentaries).then((res) => res.json()),
      // TV Shows
      fetch(requests.fetchTrendingTVShows).then((res) => res.json()),
      fetch(requests.fetchTopRatedTVShows).then((res) => res.json()),
      fetch(requests.fetchPopularTVShows).then((res) => res.json()),
      fetch(requests.fetchActionTVShows).then((res) => res.json()),
      fetch(requests.fetchComedyTVShows).then((res) => res.json()),
    ]);

    return {
      props: {
        session,
        // Movies
        moviePosters: moviePosters.results,
        trendingMovies: trendingMovies.results,
        topRatedMovies: topRatedMovies.results,
        actionMovies: actionMovies.results,
        comedyMovies: comedyMovies.results,
        horrorMovies: horrorMovies.results,
        romanceMovies: romanceMovies.results,
        documentaries: documentaries.results,
        // TV Shows
        trendingTVShows: trendingTVShows.results,
        topRatedTVShows: topRatedTVShows.results,
        popularTVShows: popularTVShows.results,
        actionTVShows: actionTVShows.results,
        comedyTVShows: comedyTVShows.results,
      }
    };
  } catch (error) {
    console.error('Error fetching data:', error);
    return {
      props: {
        session,
        error: 'Failed to fetch data'
      }
    };
  }
}

